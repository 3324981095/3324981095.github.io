<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>夜笙</title>
  
  
  <link href="https://www.nightshone.top/atom.xml" rel="self"/>
  
  <link href="https://www.nightshone.top/"/>
  <updated>2025-04-15T11:50:01.968Z</updated>
  <id>https://www.nightshone.top/</id>
  
  <author>
    <name>nightshone🥝</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>类与对象--对象之舞，类之华章，共绘C++之美</title>
    <link href="https://www.nightshone.top/posts/3d6e6861.html"/>
    <id>https://www.nightshone.top/posts/3d6e6861.html</id>
    <published>2025-04-15T09:05:07.730Z</published>
    <updated>2025-04-15T11:50:01.968Z</updated>
    
    <content type="html"><![CDATA[<h1>一、类的定义</h1><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClaeeName</span></span></span><br><span class="line"><span class="class"></span>&#123;        </span><br><span class="line"></span><br><span class="line">    //类体</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在上述代码中，class为定义类的关键字，ClassName为类名，括号里面的是主体</p><blockquote><p>在c++中有六个默认成员函数：</p><p>1、构造函数  2、析构函数   3、拷贝构造函数  4、拷贝赋值重载   5、取地址重载   6、const取地址重载。最重要的是前4个。c++11新增了两个：移动构造函数和移动赋值运算符重载。</p></blockquote><h1>二、构造函数</h1><p>2.1构造函数是一个特殊的成员函数，名字与类名相同,创建类类型对象时由编译器自动调用，以保证每个数据成员都有 一个合适的初始值，并且在对象整个生命周期内只调用一次</p><blockquote><p>特点：</p><ul><li>名称与类名相同: 构造函数的名称必须与类名完全相同。</li><li>可以重载: C++ 允许定义多个构造函数，只要它们的参数列表不同（例如参数的类型或数量）。</li><li>默认构造函数:如果没有定义任何构造函数，编译器会提供一个默认的构造函数</li><li>没有返回类型: 构造函数不返回任何类型，也不应该定义返回类型。</li></ul></blockquote><p>示例代码：</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#include &lt;iostream&gt;  </span><br><span class="line">using namespace std;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Date</span> &#123;  </span><br><span class="line"><span class="keyword">private</span>:  </span><br><span class="line">    <span class="type">int</span> <span class="built_in">day</span>;  </span><br><span class="line">    <span class="type">int</span> <span class="built_in">month</span>;  </span><br><span class="line">    <span class="type">int</span> <span class="built_in">year</span>;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:  </span><br><span class="line">    <span class="comment">// 默认构造函数  </span></span><br><span class="line">    <span class="title function_">Date</span>() : <span class="built_in">day</span>(<span class="number">1</span>), <span class="built_in">month</span>(<span class="number">1</span>), <span class="built_in">year</span>(<span class="number">2000</span>) &#123;  </span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;默认构造函数被调用，日期为 &quot;</span> &lt;&lt; <span class="built_in">day</span> &lt;&lt; <span class="string">&quot;/&quot;</span> &lt;&lt; <span class="built_in">month</span> &lt;&lt; <span class="string">&quot;/&quot;</span> &lt;&lt; <span class="built_in">year</span> &lt;&lt; endl;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 带参数的构造函数  </span></span><br><span class="line">    <span class="title function_">Date</span>(<span class="type">int</span> d, <span class="type">int</span> m, <span class="type">int</span> y) : <span class="built_in">day</span>(d), <span class="built_in">month</span>(m), <span class="built_in">year</span>(y) &#123;  </span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;带参数的构造函数被调用，日期为 &quot;</span> &lt;&lt; <span class="built_in">day</span> &lt;&lt; <span class="string">&quot;/&quot;</span> &lt;&lt; <span class="built_in">month</span> &lt;&lt; <span class="string">&quot;/&quot;</span> &lt;&lt; <span class="built_in">year</span> &lt;&lt; endl;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印日期方法  </span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">display</span>() <span class="keyword">const</span> &#123;  </span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;日期为 &quot;</span> &lt;&lt; <span class="built_in">day</span> &lt;&lt; <span class="string">&quot;/&quot;</span> &lt;&lt; <span class="built_in">month</span> &lt;&lt; <span class="string">&quot;/&quot;</span> &lt;&lt; <span class="built_in">year</span> &lt;&lt; endl;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;;  </span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span>() &#123;  </span><br><span class="line">    Date date1; <span class="comment">// 调用默认构造函数  </span></span><br><span class="line">    Date <span class="title function_">date2</span>(<span class="number">21</span>, <span class="number">11</span>, <span class="number">2024</span>); <span class="comment">// 调用带参数构造函数  </span></span><br><span class="line">    date1.<span class="property">display</span>();  </span><br><span class="line">    date2.<span class="property">display</span>();  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述代码中：</p><ul><li>Date 类中定义了两个构造函数：一个默认构造函数和一个带参数的构造函数。</li><li>Date date1; 使用默认构造函数初始化，日期为 1/1/2000。</li><li>Date date2(21, 11, 2024); 使用带参数构造函数初始化，日期为 21/11/2024。</li><li>display 方法用于输出日期信息</li></ul><hr><h1>三、析构函数</h1><p>定义：析构函数是一种特殊的成员函数，在对象的生命周期结束时自动调用，用于释放对象占用的资源。</p><blockquote><p>特点：</p><ul><li>名称与类名相同，前面加波浪号（~）: 例如 ~Point()。</li><li>没有参数和返回值: 析构函数不能带参数，也不返回值。</li><li>不能重载: 每个类只能有一个析构函数。</li><li>调用顺序: 析构函数的调用顺序是与对象构造顺序相反的。</li></ul></blockquote><p>示例代码：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Event</span> &#123;  </span><br><span class="line"><span class="keyword">private</span>:  </span><br><span class="line">    <span class="built_in">string</span> name;  </span><br><span class="line">    Date date; <span class="comment">// 使用日期类作为成员  </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:  </span><br><span class="line">    <span class="comment">// 构造函数  </span></span><br><span class="line">    Event(<span class="keyword">const</span> <span class="built_in">string</span>&amp; eventName, <span class="built_in">int</span> d, <span class="built_in">int</span> m, <span class="built_in">int</span> y) : name(eventName), date(d, m, y) &#123;  </span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;构造函数：事件 \&quot;&quot;</span> &lt;&lt; name &lt;&lt; <span class="string">&quot;\&quot; 在 &quot;</span> &lt;&lt; d &lt;&lt; <span class="string">&quot;/&quot;</span> &lt;&lt; m &lt;&lt; <span class="string">&quot;/&quot;</span> &lt;&lt; y &lt;&lt; <span class="string">&quot; 被创建&quot;</span> &lt;&lt; endl;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 析构函数  </span></span><br><span class="line">    ~Event() &#123;  </span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;析构函数：事件 \&quot;&quot;</span> &lt;&lt; name &lt;&lt; <span class="string">&quot;\&quot; 被销毁&quot;</span> &lt;&lt; endl;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印事件信息  </span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">display</span>() <span class="keyword">const</span></span> &#123;  </span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;事件名称: &quot;</span> &lt;&lt; name &lt;&lt; <span class="string">&quot;, 日期: &quot;</span>;  </span><br><span class="line">        date.display();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;;  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">main</span>()</span> &#123;  </span><br><span class="line">    <span class="function">Event <span class="title">event</span>(<span class="params"><span class="string">&quot;生日派对&quot;</span>, <span class="number">21</span>, <span class="number">11</span>, <span class="number">2024</span></span>)</span>; <span class="comment">// 创建事件  </span></span><br><span class="line">    <span class="keyword">event</span>.display();  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// 在此处 event 对象被销毁，析构函数会被调用  </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码解析：<br>Event 类包含一个字符串成员 name 和一个 Date 类型的成员 date。<br>在构造函数中，初始化事件名称和日期，当 Event 对象创建时，构造函数被调用。<br>当 Event 对象超出作用域时，析构函数被自动调用，输出事件销毁的信息</p><hr>]]></content>
    
    
    <summary type="html">本期带来C++类与对象相关笔记</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>第一篇</title>
    <link href="https://www.nightshone.top/posts/73626faf.html"/>
    <id>https://www.nightshone.top/posts/73626faf.html</id>
    <published>2025-04-14T04:39:33.202Z</published>
    <updated>2025-04-14T13:37:02.639Z</updated>
    
    <content type="html"><![CDATA[<h1>一、开始</h1><p>当你看到这一篇的时候，说明nightshone博客网站基本搭建完成，具体一些细则还在改，因为涉及到一些前端知识，所以还在加急修改…</p><h1>二、</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;一、开始&lt;/h1&gt;
&lt;p&gt;当你看到这一篇的时候，说明nightshone博客网站基本搭建完成，具体一些细则还在改，因为涉及到一些前端知识，所以还在加急修改…&lt;/p&gt;
&lt;h1&gt;二、&lt;/h1&gt;
</summary>
      
    
    
    
    
  </entry>
  
</feed>
